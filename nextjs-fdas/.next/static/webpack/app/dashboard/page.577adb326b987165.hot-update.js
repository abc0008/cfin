"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/dashboard/page",{

/***/ "(app-pages-browser)/./src/lib/api/documents.ts":
/*!**********************************!*\
  !*** ./src/lib/api/documents.ts ***!
  \**********************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   documentsApi: function() { return /* binding */ documentsApi; }\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/./node_modules/next/dist/build/polyfills/process.js\");\nconst API_BASE_URL = process.env.NEXT_PUBLIC_API_URL || \"http://localhost:8000/api\";\n// Function to handle API errors\nconst handleApiError = (error)=>{\n    console.error(\"API Error:\", error);\n    if (error.response && error.response.data && error.response.data.detail) {\n        throw new Error(error.response.data.detail);\n    }\n    throw new Error(\"An error occurred while communicating with the server\");\n};\nconst documentsApi = {\n    /**\n   * Uploads a document to the server\n   */ async uploadDocument (file) {\n        try {\n            const formData = new FormData();\n            formData.append(\"file\", file);\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/documents/upload\"), {\n                method: \"POST\",\n                body: formData\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.detail || \"Failed to upload document\");\n            }\n            const data = await response.json();\n            // For now, return a placeholder ProcessedDocument until re-processing is complete\n            return {\n                metadata: {\n                    id: data.document_id,\n                    filename: data.filename,\n                    uploadTimestamp: new Date().toISOString(),\n                    fileSize: file.size,\n                    mimeType: file.type,\n                    userId: \"current-user\"\n                },\n                contentType: \"other\",\n                extractionTimestamp: new Date().toISOString(),\n                periods: [],\n                extractedData: {},\n                confidenceScore: 0,\n                processingStatus: data.status,\n                errorMessage: data.status === \"failed\" ? data.message : undefined\n            };\n        } catch (error) {\n            throw handleApiError(error);\n        }\n    },\n    /**\n   * Lists all documents\n   */ async listDocuments () {\n        let page = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 1, pageSize = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 10;\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/documents?page=\").concat(page, \"&page_size=\").concat(pageSize));\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.detail || \"Failed to fetch documents\");\n            }\n            return await response.json();\n        } catch (error) {\n            throw handleApiError(error);\n        }\n    },\n    /**\n   * Deletes a document\n   */ async deleteDocument (documentId) {\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/documents/\").concat(documentId), {\n                method: \"DELETE\"\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.detail || \"Failed to delete document\");\n            }\n            return await response.json();\n        } catch (error) {\n            throw handleApiError(error);\n        }\n    },\n    /**\n   * Gets document count\n   */ async getDocumentCount () {\n        try {\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/documents/count\"));\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.detail || \"Failed to get document count\");\n            }\n            return await response.json();\n        } catch (error) {\n            throw handleApiError(error);\n        }\n    },\n    /**\n   * Checks if a document has valid financial data\n   */ async checkDocumentFinancialData (documentId) {\n        try {\n            console.log(\"Checking financial data for document: \".concat(documentId));\n            // Get the document details\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/documents/\").concat(documentId));\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.detail || \"Failed to get document\");\n            }\n            const docInfo = await response.json();\n            console.log(\"Document data:\", docInfo);\n            // First check if the document processing is complete\n            if (docInfo.processing_status !== \"completed\") {\n                return {\n                    hasFinancialData: false,\n                    diagnosis: \"Document is still being processed (status: \".concat(docInfo.processing_status, \"). Please wait for processing to complete.\")\n                };\n            }\n            // Check if the extracted_data field exists\n            if (!docInfo.extracted_data) {\n                return {\n                    hasFinancialData: false,\n                    diagnosis: \"Document has no extracted data. This may indicate a processing failure.\"\n                };\n            }\n            // Check if raw_text was extracted\n            const hasRawText = !!(docInfo.extracted_data.raw_text && docInfo.extracted_data.raw_text.length > 0);\n            // Check if financial_data field exists and has content\n            const financialDataExists = !!docInfo.extracted_data.financial_data;\n            const hasFinancialData = financialDataExists && Object.keys(docInfo.extracted_data.financial_data).length > 0;\n            // Check content type - should be a financial document\n            const isFinancialDocument = docInfo.content_type === \"financial_report\" || docInfo.content_type === \"balance_sheet\" || docInfo.content_type === \"income_statement\" || docInfo.content_type === \"cash_flow\";\n            // Log detailed information for debugging\n            console.log(\"Financial data check details:\", {\n                processingStatus: docInfo.processing_status,\n                hasRawText,\n                financialDataExists,\n                hasFinancialData,\n                isFinancialDocument,\n                contentType: docInfo.content_type\n            });\n            // Determine diagnosis based on the checks\n            let diagnosis = \"\";\n            if (!hasRawText) {\n                diagnosis = \"Document has no extracted text. This may indicate a processing issue or an unreadable PDF.\";\n            } else if (!financialDataExists) {\n                diagnosis = \"Document has no financial_data field. This may indicate the backend didn't recognize it as a financial document.\";\n            } else if (!hasFinancialData) {\n                diagnosis = \"Document has an empty financial data structure. This indicates the backend recognized it as a financial document but could not extract structured data from it.\";\n            } else if (!isFinancialDocument) {\n                diagnosis = \"Document was not classified as a financial document (content_type: \".concat(docInfo.content_type, \"), but does have financial data.\");\n            } else {\n                diagnosis = \"Document has valid financial data.\";\n            }\n            return {\n                hasFinancialData,\n                diagnosis\n            };\n        } catch (error) {\n            const errorMessage = error instanceof Error ? error.message : String(error);\n            console.error(\"Error checking document financial data:\", errorMessage);\n            return {\n                hasFinancialData: false,\n                diagnosis: \"Error retrieving document: \".concat(errorMessage)\n            };\n        }\n    },\n    /**\n   * Verify a document's financial data and optionally trigger re-extraction\n   */ async verifyDocumentFinancialData (documentId) {\n        let retryExtraction = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        try {\n            console.log(\"Verifying financial data for document: \".concat(documentId));\n            // First check if the document has financial data\n            const checkResult = await this.checkDocumentFinancialData(documentId);\n            if (checkResult.hasFinancialData) {\n                return {\n                    success: true,\n                    message: \"Document already has valid financial data\"\n                };\n            }\n            if (!retryExtraction) {\n                return {\n                    success: false,\n                    message: checkResult.diagnosis\n                };\n            }\n            // Trigger re-extraction by calling the process endpoint\n            console.log(\"Attempting to re-extract financial data for document \".concat(documentId));\n            const response = await fetch(\"\".concat(API_BASE_URL, \"/documents/\").concat(documentId, \"/process\"), {\n                method: \"POST\",\n                headers: {\n                    \"Content-Type\": \"application/json\"\n                },\n                body: JSON.stringify({})\n            });\n            if (!response.ok) {\n                const errorData = await response.json();\n                throw new Error(errorData.detail || \"Failed to process document\");\n            }\n            return {\n                success: true,\n                message: \"Financial data re-extraction triggered. Please wait for processing to complete.\"\n            };\n        } catch (error) {\n            console.error(\"Error verifying document financial data:\", error);\n            return {\n                success: false,\n                message: \"Error during verification: \".concat(error instanceof Error ? error.message : String(error))\n            };\n        }\n    },\n    /**\n   * Uploads and verifies a document, ensuring it has valid financial data\n   */ async uploadAndVerifyDocument (file) {\n        let autoVerify = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : true;\n        try {\n            // First upload the document normally\n            console.log(\"Starting document upload: \".concat(file.name, \" (\").concat(file.size, \" bytes)\"));\n            const uploadedDoc = await this.uploadDocument(file);\n            console.log(\"Document uploaded successfully with ID: \".concat(uploadedDoc.metadata.id));\n            // If auto-verify is disabled, return the document as-is\n            if (!autoVerify) {\n                console.log(\"Auto-verification disabled, returning document as-is\");\n                return uploadedDoc;\n            }\n            // Check if the document has financial data\n            console.log(\"Verifying financial data for document \".concat(uploadedDoc.metadata.id, \"...\"));\n            const checkResult = await this.checkDocumentFinancialData(uploadedDoc.metadata.id);\n            // If it already has financial data, we're done\n            if (checkResult.hasFinancialData) {\n                console.log(\"✅ Document \".concat(uploadedDoc.metadata.id, \" has valid financial data.\"));\n                return uploadedDoc;\n            }\n            // Otherwise, try to fix it\n            console.log(\"⚠️ Document \".concat(uploadedDoc.metadata.id, \" lacks financial data: \").concat(checkResult.diagnosis));\n            console.log(\"Triggering financial data re-extraction...\");\n            try {\n                const fixResult = await this.verifyDocumentFinancialData(uploadedDoc.metadata.id, true);\n                if (fixResult.success) {\n                    console.log(\"Re-extraction triggered successfully: \".concat(fixResult.message));\n                    console.log(\"Waiting for processing to complete...\");\n                    // Wait a moment for processing to take effect\n                    await new Promise((resolve)=>setTimeout(resolve, 2000));\n                    try {\n                        var _updatedDocData_metadata, _updatedDocData_metadata1, _updatedDocData_metadata2, _updatedDocData_metadata3, _updatedDocData_metadata4, _updatedDocData_metadata5;\n                        // Get the updated document\n                        console.log(\"Fetching updated document after re-extraction...\");\n                        const response = await fetch(\"\".concat(API_BASE_URL, \"/documents/\").concat(uploadedDoc.metadata.id));\n                        if (!response.ok) {\n                            throw new Error(\"Failed to fetch updated document\");\n                        }\n                        const updatedDocData = await response.json();\n                        // Convert the API response to our ProcessedDocument format\n                        const updatedDoc = {\n                            metadata: {\n                                id: ((_updatedDocData_metadata = updatedDocData.metadata) === null || _updatedDocData_metadata === void 0 ? void 0 : _updatedDocData_metadata.id) || uploadedDoc.metadata.id,\n                                filename: ((_updatedDocData_metadata1 = updatedDocData.metadata) === null || _updatedDocData_metadata1 === void 0 ? void 0 : _updatedDocData_metadata1.filename) || uploadedDoc.metadata.filename,\n                                uploadTimestamp: ((_updatedDocData_metadata2 = updatedDocData.metadata) === null || _updatedDocData_metadata2 === void 0 ? void 0 : _updatedDocData_metadata2.upload_timestamp) || uploadedDoc.metadata.uploadTimestamp,\n                                fileSize: ((_updatedDocData_metadata3 = updatedDocData.metadata) === null || _updatedDocData_metadata3 === void 0 ? void 0 : _updatedDocData_metadata3.file_size) || uploadedDoc.metadata.fileSize,\n                                mimeType: ((_updatedDocData_metadata4 = updatedDocData.metadata) === null || _updatedDocData_metadata4 === void 0 ? void 0 : _updatedDocData_metadata4.mime_type) || uploadedDoc.metadata.mimeType,\n                                userId: ((_updatedDocData_metadata5 = updatedDocData.metadata) === null || _updatedDocData_metadata5 === void 0 ? void 0 : _updatedDocData_metadata5.user_id) || uploadedDoc.metadata.userId\n                            },\n                            contentType: updatedDocData.content_type || uploadedDoc.contentType,\n                            extractionTimestamp: updatedDocData.extraction_timestamp || uploadedDoc.extractionTimestamp,\n                            periods: updatedDocData.periods || uploadedDoc.periods,\n                            extractedData: updatedDocData.extracted_data || uploadedDoc.extractedData,\n                            confidenceScore: updatedDocData.confidence_score || uploadedDoc.confidenceScore,\n                            processingStatus: updatedDocData.processing_status || uploadedDoc.processingStatus\n                        };\n                        // Check again if it has financial data\n                        console.log(\"Verifying if financial data was correctly extracted...\");\n                        const finalCheck = await this.checkDocumentFinancialData(uploadedDoc.metadata.id);\n                        if (finalCheck.hasFinancialData) {\n                            console.log(\"✅ Re-extraction successful! Document now has valid financial data.\");\n                        } else {\n                            console.warn(\"⚠️ Document still lacks financial data after re-extraction: \".concat(finalCheck.diagnosis));\n                            console.log(\"You may need to try again or check the document format.\");\n                        }\n                        return updatedDoc;\n                    } catch (fetchError) {\n                        console.error(\"Error fetching updated document:\", fetchError);\n                        console.log(\"Returning original document as fallback.\");\n                        return uploadedDoc;\n                    }\n                } else {\n                    console.error(\"Failed to trigger re-extraction: \".concat(fixResult.message));\n                    console.log(\"Please try again manually or contact support if the issue persists.\");\n                    return uploadedDoc;\n                }\n            } catch (fixError) {\n                console.error(\"Error during verification attempt:\", fixError);\n                console.log(\"Returning original document as fallback.\");\n                return uploadedDoc;\n            }\n        } catch (error) {\n            console.error(\"Error in uploadAndVerifyDocument:\", error);\n            throw error; // Re-throw to allow the calling function to handle it\n        }\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./src/lib/api/documents.ts\n"));

/***/ })

});